import DashboardLayout from "@/components/layout/DashboardLayout";
import {
  Branch,
  Chat,
  Conciliation,
  Customer,
  Vendor,
} from "@/constants/models";
import { AppstoreOutlined, TeamOutlined } from "@ant-design/icons";
import {
  Button,
  Card,
  Divider,
  Drawer,
  Input,
  message,
  Radio,
  Space,
  Table,
  TableColumnsType,
  Tag,
  Typography,
} from "antd";
import React, { ReactElement, useState } from "react";

type DataType = Conciliation & OtherProps;
interface OtherProps {
  customer: Customer;
  vendor: Vendor;
  customerName: string;
  vendorName: string;
  branchName: string;
  chat: Chat;
}

const Index = () => {
  const columns: TableColumnsType<DataType> = [
    {
      title: "ID",
      dataIndex: "id",
      key: "id",
      render: (id, record) => {
        const autogeneratedTag = record.origin.includes("autogenerated") ? (
          <Tag> Autogenerado</Tag>
        ) : null;
        const statusMap: Record<string, any> = {
          created: <Tag color="blue">Creado</Tag>,
          read: <Tag>Leído</Tag>,
          discarded: <Tag color="red">Descartado</Tag>,
          resolved: <Tag color="green">Resuelto</Tag>,
        };
        const statusText = statusMap[record.status] || record.status;
        return (
          <Space direction="vertical" wrap>
            <Tag> {new Date(record.createdAt).toLocaleDateString()}</Tag>
            {id}
            {autogeneratedTag}
            {statusText}
          </Space>
        );
      },
    },
    {
      title: "Disputa",
      dataIndex: "id",
      key: "id",
      render: (id, record) => {
        const isByCustomer = record.origin.includes("by_customer");
        const senderName = isByCustomer
          ? record.vendor.fullName
          : record.customer.fullName;
        const recipientName = isByCustomer
          ? record.customer.fullName
          : record.vendor.fullName;
        const SenderIcon = isByCustomer ? TeamOutlined : AppstoreOutlined;
        const RecipientIcon = isByCustomer ? AppstoreOutlined : TeamOutlined;
        return (
          <>
            <SenderIcon /> Remitente: {senderName}
            <br />
            <RecipientIcon /> Destinatario: {recipientName}
            <br />
            Motivo: {record.chat.messages[0].content}
          </>
        );
      },
    },
    {
      title: "Acciones",
      dataIndex: "id",
      key: "id",
      render: (id, record) => {
        return (
          <Space wrap split={<Divider type="vertical" />}>
            <ChatDrawer chat={record.chat} />
            <DisputeStateDrawer conciliation={record} />
            <PenalizeDrawer customer={record.customer} vendor={record.vendor} />
          </Space>
        );
      },
    },
  ];
  return (
    <Table<DataType>
      columns={columns}
      rowKey={(record) => record.id}
      dataSource={[]}
    />
  );
};

export default Index;
Index.getLayout = function getLayout(page: ReactElement) {
  return <DashboardLayout backButton> {page}</DashboardLayout>;
};

const ChatDrawer = ({ chat }: { chat: Chat }) => {
  const messages = chat.messages;
  const [isOpen, setIsOpen] = useState(false);
  return (
    <>
      <Button type="text" onClick={() => setIsOpen(true)}>
        Ver chat
      </Button>
      <Drawer open={isOpen} onClose={() => setIsOpen(false)}>
        {messages.map((message) => (
          <div key={message.id}>
            <p>
              {message.sender === "customer" ? (
                <TeamOutlined />
              ) : (
                <AppstoreOutlined />
              )}
              <strong> {message.createdBy}: </strong>
              {message.content}
            </p>
          </div>
        ))}
      </Drawer>
    </>
  );
};

const DisputeStateDrawer = ({
  conciliation,
}: {
  conciliation: Conciliation;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [status, setStatus] = useState(conciliation.status);

  const handleStatusChange = (newStatus: Conciliation["status"]) => {
    setStatus(newStatus);
    // Here would go the API call to update the status
    message.success("Estado actualizado correctamente");
    setIsOpen(false);
  };

  return (
    <>
      <Button
        type="text"
        onClick={() => setIsOpen(true)}
        style={{ marginLeft: 8 }}
      >
        Cambiar estado
      </Button>
      <Drawer
        title="Cambiar estado de la disputa"
        open={isOpen}
        onClose={() => setIsOpen(false)}
      >
        <Space direction="vertical" style={{ width: "100%" }}>
          <Typography.Text>Estado actual: {status}</Typography.Text>

          <Button
            block
            type={status === "read" ? "primary" : "default"}
            onClick={() => handleStatusChange("read")}
          >
            Marcar como leída
          </Button>

          <Button
            block
            type={status === "resolved" ? "primary" : "default"}
            onClick={() => handleStatusChange("resolved")}
          >
            Marcar como resuelta
          </Button>

          <Button
            block
            danger
            type={status === "discarded" ? "primary" : "default"}
            onClick={() => handleStatusChange("discarded")}
          >
            Descartar
          </Button>
        </Space>
      </Drawer>
    </>
  );
};
const PenalizeDrawer = ({
  customer,
  vendor,
}: {
  customer: any;
  vendor: any;
}) => {
  const [selectedUser, setSelectedUser] = useState<"customer" | "vendor">(
    "customer"
  );
  const [penaltyType, setPenaltyType] = useState<"penalty" | "ban">("penalty");
  const [reason, setReason] = useState("");
  const [isOpen, setIsOpen] = useState(false);

  const handlePenalize = () => {
    // Here would go the API call to penalize/ban the user
    message.success(
      `${penaltyType === "penalty" ? "Penalizado" : "Bloqueado"} ${
        selectedUser === "customer" ? customer.fullName : vendor.fullName
      } exitosamente`
    );
    setIsOpen(false);
  };

  return (
    <>
      <Button type="text" onClick={() => setIsOpen(true)}>
        Penalizar
      </Button>
      <Drawer
        title="Penalizar usuario"
        open={isOpen}
        onClose={() => setIsOpen(false)}
        extra={
          <Button type="primary" onClick={handlePenalize} disabled={!reason}>
            Confirmar
          </Button>
        }
      >
        <Space direction="vertical" style={{ width: "100%" }} size="large">
          <div>
            <Typography.Text strong>Seleccionar usuario</Typography.Text>
            <Radio.Group
              value={selectedUser}
              onChange={(e) => setSelectedUser(e.target.value)}
              style={{
                display: "flex",
                flexDirection: "column",
                gap: 8,
                marginTop: 8,
              }}
            >
              <Radio value="customer">Cliente: {customer.fullName}</Radio>
              <Radio value="vendor">Veci: {vendor.fullName}</Radio>
            </Radio.Group>
          </div>

          <div>
            <Typography.Text strong>Tipo de sanción</Typography.Text>
            <Radio.Group
              value={penaltyType}
              onChange={(e) => setPenaltyType(e.target.value)}
              style={{
                display: "flex",
                flexDirection: "column",
                gap: 8,
                marginTop: 8,
              }}
            >
              <Radio value="penalty">Penalizar (reducir calificación)</Radio>
              <Radio value="ban">Bloquear cuenta</Radio>
            </Radio.Group>
          </div>

          <div>
            <Typography.Text strong>Razón</Typography.Text>
            <Input.TextArea
              value={reason}
              onChange={(e) => setReason(e.target.value)}
              placeholder="Ingrese el motivo de la sanción"
              rows={4}
              style={{ marginTop: 8 }}
            />
          </div>
        </Space>
      </Drawer>
    </>
  );
};
